# .github/workflows/validate-filenames.yml
name: Check filenames

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get list of changed files
        id: files
        run: |
          files=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path')
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if Valid Filename
        id: check
        run: |
          bad_files=$(echo "${{ steps.files.outputs.files }}" | grep ":" || true)
          if [ -n "$bad_files" ]; then
            echo "bad_files<<EOF" >> $GITHUB_OUTPUT
            echo "$bad_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "bad_files=" >> $GITHUB_OUTPUT
            echo "No bad filenames found."
          fi

      - name: Comment on PR if invalid filenames found
        if: failure() && steps.check.outputs.bad_files != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const badFiles = process.env.BAD_FILES || '';
            if (badFiles.trim().length === 0) {
              console.log("No bad files to report, skipping comment.");
              return;
            }
            const body = [
              "‚ùå Filenames with colons detected:",
              "```",
              badFiles,
              "```",
              'Please rename these files to remove ":" before merging.'
            ].join("\n");
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
        env:
          BAD_FILES: ${{ steps.check.outputs.bad_files }}
